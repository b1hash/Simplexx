name: Build & Test Simplexx

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows-client:
    name: Build Windows Client
    runs-on: self-hosted
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]
        include:
          - platform: x64
            msvc_arch: x64
            msbuild_platform: x64
          - platform: x86
            msvc_arch: x86
            msbuild_platform: x86
    env:
      CONFIGURATION: ${{ matrix.configuration }}
      PLATFORM: ${{ matrix.platform }}
      MSBUILD_PLATFORM: ${{ matrix.msbuild_platform }}

    steps:
      - name: Setup Git
        shell: powershell
        run: |
          git --version
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Git not found, installing..."
            choco install git -y --no-progress
            refreshenv
          }
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 10
        continue-on-error: false

      - name: Ensure Visual Studio Build Tools (only on self-hosted)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          try {
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              $pkg = choco list --local-only | Select-String "visualstudio2019buildtools"
              if (-not $pkg) {
                Write-Host "Installing Visual Studio Build Tools..."
                choco install visualstudio2019buildtools --package-parameters `
                  "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
                   --add Microsoft.VisualStudio.Component.Windows10SDK.19041 `
                   --add Microsoft.VisualStudio.Component.VC.ATLMFC `
                   --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 `
                   --add Microsoft.VisualStudio.Component.VC.ATLMFC.v142.x86.x64 `
                   --includeRecommended --includeOptional --quiet --norestart" -y
              } else {
                Write-Host "Visual Studio Build Tools already installed"
              }
            } else {
              Write-Host "Chocolatey not available, skipping Visual Studio installation"
            }
          } catch {
            Write-Host "Error during Visual Studio setup: $_"
          }

      - name: Setup MSVC dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.msvc_arch }}

      - name: Download zstd source
        shell: pwsh
        run: |
          try {
            $zstdUrl = "https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-1.5.5-win64.zip"
            $zstdDir = "external\zstd"
            
            Write-Host "Creating directory: $zstdDir"
            New-Item -ItemType Directory -Force -Path $zstdDir | Out-Null
            
            Write-Host "Downloading zstd from: $zstdUrl"
            Invoke-WebRequest -Uri $zstdUrl -OutFile "$zstdDir\zstd.zip" -UseBasicParsing
            
            Write-Host "Extracting archive..."
            Expand-Archive -Path "$zstdDir\zstd.zip" -DestinationPath $zstdDir -Force
            
            Write-Host "zstd directory contents:"
            Get-ChildItem -Recurse $zstdDir | ForEach-Object { Write-Host $_.FullName }
          } catch {
            Write-Host "Error downloading zstd: $_"
            throw
          }

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build solution (2019Remote.sln)
        shell: pwsh
        run: |
          try {
            $sln = (Get-ChildItem -Recurse -Filter '2019Remote.sln' | Select-Object -First 1).FullName
            if (-not $sln) { throw "Solution file '2019Remote.sln' not found" }
            
            Write-Host "Building solution: $sln"
            Write-Host "Configuration: $env:CONFIGURATION"
            Write-Host "Platform: $env:MSBUILD_PLATFORM"
            
            & msbuild $sln /m /p:Configuration=$env:CONFIGURATION /p:Platform=$env:MSBUILD_PLATFORM /p:PreferredToolArchitecture=$env:MSBUILD_PLATFORM /p:AdditionalIncludeDirectories="external\zstd\zstd-1.5.5\include"
            
            if ($LASTEXITCODE -ne 0) { 
              throw "MSBuild failed with exit code: $LASTEXITCODE" 
            }
            Write-Host "Build completed successfully"
          } catch {
            Write-Host "Build error: $_"
            throw
          }

      - name: Collect artifacts
        shell: pwsh
        run: |
          try {
            $outDir = "dist\${env:PLATFORM}\${env:CONFIGURATION}"
            Write-Host "Creating output directory: $outDir"
            New-Item -ItemType Directory -Force -Path $outDir | Out-Null
            
            $patterns = @('*.exe','*.dll','*.pdb')
            Write-Host "Collecting artifacts with patterns: $($patterns -join ', ')"
            
            foreach ($pat in $patterns) {
              $files = Get-ChildItem -Recurse -File -Include $pat -Path . | Where-Object {
                $_.DirectoryName -match "\\(x64|x86|Win32)\\$env:CONFIGURATION(\\|$)"
              }
              
              foreach ($file in $files) {
                Write-Host "Copying: $($file.FullName)"
                Copy-Item -Path $file.FullName -Destination $outDir -Force -ErrorAction SilentlyContinue
              }
            }
            
            Write-Host "Collected artifacts:"
            Get-ChildItem -Recurse $outDir | ForEach-Object { 
              Write-Host "  $($_.FullName)"
            }
          } catch {
            Write-Host "Error collecting artifacts: $_"
            throw
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-client-${{ matrix.platform }}-${{ matrix.configuration }}
          path: dist/${{ matrix.platform }}/${{ matrix.configuration }}
          retention-days: 7

  build-documentation:
    name: Build Documentation
    runs-on: self-hosted  # Ensure this only runs on your self-hosted Windows runner
    steps:
      - name: Setup Git
        shell: pwsh
        run: |
          try {
            git --version
            Write-Host "Git is available"
          } catch {
            Write-Host "Git not found, installing..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install git -y --no-progress
            } else {
              Write-Host "Chocolatey not found, please install Git manually"
            }
          }
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 10
        continue-on-error: false

      - name: Archive documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            ReadMe.md
            ReadMe_EN.md
            Dependencies.md
            history.md
            使用方法.txt
            使用花生壳.txt
            反向代理.md
          retention-days: 7
